{"version":3,"sources":["logo.png","WheelRow.js","WheelCalculator.js","App.js","reportWebVitals.js","index.js"],"names":["WheelRow","props","sectionWidth","sidewallAspect","wheelDiameter","sidewallHeight","toFixed","unit","radius","diameter","circumference","revsPerMile","WheelCalculator","useState","setSectionWidth","setsidewallAspect","setwheelDiameter","rows","setRows","className","onSubmit","e","preventDefault","totalDiameter","parseFloat","totalRadius","Math","PI","concat","style","value","onChange","target","autoFocus","type","map","row","i","App","alt","src","logo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c99e277e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.3fce93bc.png\";","import React from 'react';\n\nconst WheelRow = (props) => {\n  return (\n    <tr>\n      <td>{ props.sectionWidth }/{ props.sidewallAspect }-{ props.wheelDiameter }</td>\n      <td>{ props.sidewallHeight.toFixed(2) } { props.unit }</td>\n      <td>{ props.radius.toFixed(2) } { props.unit }</td>\n      <td>{ props.diameter.toFixed(2) } { props.unit }</td>\n      <td>{ props.circumference.toFixed(2) } { props.unit }</td>\n      <td>{ props.revsPerMile.toFixed(2) }</td>\n    </tr>\n  );\n}\n\nexport default WheelRow;\n","import React, { useState } from 'react';\n\nimport WheelRow from './WheelRow';\n\nconst WheelCalculator = (props) => {\n  const [sectionWidth, setSectionWidth] = useState('');\n  const [sidewallAspect, setsidewallAspect] = useState('');\n  const [wheelDiameter, setwheelDiameter] = useState('');\n  const [rows, setRows] = useState([]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    let sidewallHeight = (sidewallAspect / 100 * sectionWidth / 25.4); // Calculate Sidewall Height\n    let totalDiameter = parseFloat(wheelDiameter) + (2 * sidewallHeight);  // Calculate Total Diameter\n    let totalRadius = totalDiameter / 2;  // Calculate Total Radius\n    let circumference = 2 * Math.PI * totalRadius;  // Calculate Total Circumference\n    let revsPerMile = 63360 / circumference;  // Calculate Revolutions per Mile\n\n    setRows(rows.concat({\n      sectionWidth: sectionWidth,\n      sidewallAspect: sidewallAspect,\n      wheelDiameter: wheelDiameter,\n      sidewallHeight: sidewallHeight,\n      totalRadius: totalRadius,\n      totalDiameter: totalDiameter,\n      circumference: circumference,\n      revsPerMile: revsPerMile\n    }));\n  }\n\n  return (\n    <>\n      <form\n        className=\"WheelForm has-text-centered\"\n        onSubmit={handleSubmit}\n      >\n        {/* Cross Section Width */}\n        <input\n          className=\"input is-small\"\n          style={{'width': '8em'}}\n          value={sectionWidth}\n          onChange={e => setSectionWidth(e.target.value)}\n          autoFocus />\n\n        <b className=\"between-input\">/</b>\n\n        {/* Sidewall Aspect Ratio */}\n        <input\n          className=\"input is-small\"\n          style={{'width': '6em'}}\n          value={sidewallAspect}\n          onChange={e => setsidewallAspect(e.target.value)}\n          />\n\n        <b className=\"between-input\">-</b>\n\n        {/* Wheel Diameter */}\n        <input\n          className=\"input is-small\"\n          style={{'width': '6em'}}\n          value={wheelDiameter}\n          onChange={e => setwheelDiameter(e.target.value)}\n          />\n\n        {/* Add Button */}\n        <input className=\"btn-add\" type=\"submit\" value=\"Add\" />\n\n      </form>\n\n      <table className=\"table WheelTable\">\n        <thead>\n          <tr>\n            <th>Specification</th>\n            <th>Sidewall Height</th>\n            <th>Total Radius</th>\n            <th>Total Diameter</th>\n            <th>Total Circumference</th>\n            <th>Revolutions per Mile</th>\n          </tr>\n        </thead>\n        <tbody>\n          {rows.map((row, i) => (\n            <WheelRow\n              key={i}\n              sectionWidth={row.sectionWidth}\n              sidewallAspect={row.sidewallAspect}\n              wheelDiameter={row.wheelDiameter}\n              sidewallHeight={row.sidewallHeight}\n              radius={row.totalRadius}\n              diameter={row.totalDiameter}\n              circumference={row.circumference}\n              revsPerMile={row.revsPerMile}\n              unit=\"in\"\n            />\n          ))}\n        </tbody>\n      </table>\n\n    </>\n  );\n}\n\nexport default WheelCalculator;\n","import logo from './logo.png';\nimport './App.scss';\n\nimport WheelCalculator from './WheelCalculator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <section className=\"hero is-success is-fullheight\">\n        <div className=\"section\">\n          <div className=\"container has-text-centered\">\n            <div className=\"column is-8-desktop is-offset-2-desktop\">\n              <h3 className=\"title has-text-black\">Wheels</h3>\n              <hr />\n              <p className=\"subtitle has-text-black\">by Joho</p>\n              <div className=\"box\">\n                <figure className=\"logo\">\n                  <img alt=\"Logo\" src={logo} />\n                </figure>\n                {/* Form */}\n                <div className=\"table-container\">\n                  <WheelCalculator />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}